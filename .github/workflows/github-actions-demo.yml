# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm i
    - run: npm install -g pkg@5.8.1
    - run: npm run tsc
    - name: Package the app
      run: mkdir packaged-app
    - run: pkg -t node18-linux-x64,node18-linux-arm64,node18-win-x64,node18-win-arm64,node18-macos-x64,node18-macos-arm64 . -o packaged-app/pm
    - name: Create Github release
      id: create-new-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: ${{ github.run_number }}
    - name: Upload Linux ARM 64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: ./packaged-app/pm-linux-arm64
        asset_name: pm-linux-arm64-v${{ github.run_number }}
        asset_content_type: application/x-executable
    - name: Upload Linux x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: ./packaged-app/pm-linux-x64
        asset_name: pm-linux-x64-v${{ github.run_number }}
        asset_content_type: application/x-executable
    - name: Upload Mac ARM 64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: ./packaged-app/pm-macos-arm64
        asset_name: pm-macos-arm64-v${{ github.run_number }}
        asset_content_type: application/x-executable
    - name: Upload Mac x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: ./packaged-app/pm-macos-x64
        asset_name: pm-macos-x64-v${{ github.run_number }}
        asset_content_type: application/x-executable
    - name: Upload Win ARM 64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: ./packaged-app/pm-win-arm64.exe
        asset_name: pm-win-arm64-v${{ github.run_number }}.exe
        asset_content_type: application/x-executable
    - name: Upload Win x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: ./packaged-app/pm-win-x64.exe
        asset_name: pm-win-x64-v${{ github.run_number }}.exe
        asset_content_type: application/x-executable
